/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frontera;

import DAO.EquipoDAO;
import DAO.EquiposUsadosDAO;
import DAO.IngresoPacienteDAO;
import Entidad.Equipo;
import Entidad.EquiposUsados;
import Entidad.IngresoPaciente;
import Entidad.Paciente;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author tech
 */
public class ActualizarPaciente extends javax.swing.JPanel {
    
    private IngresoPaciente ingp = new IngresoPaciente();
    private Paciente paciente = new Paciente();
    private ArrayList <Equipo> equipos = new ArrayList();
    
    /**
     * Creates new form IngresoPaciente
     */
    public ActualizarPaciente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        identificacionTF = new javax.swing.JTextField();
        nombre1L = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        aceptarB = new javax.swing.JButton();
        cancelarB = new javax.swing.JButton();
        nombre2L = new javax.swing.JLabel();
        apellido1L = new javax.swing.JLabel();
        apellido2L = new javax.swing.JLabel();
        tipoAtencionCB = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        noCamaCB = new javax.swing.JComboBox<>();
        fechaL = new javax.swing.JLabel();
        rethusL = new javax.swing.JLabel();
        equiposUsados = new javax.swing.JPanel();
        jCheckBox1ventilador = new javax.swing.JCheckBox();
        jCheckBox2saturometro = new javax.swing.JCheckBox();
        jCheckBox3balas = new javax.swing.JCheckBox();
        jCheckBox4monitor = new javax.swing.JCheckBox();
        jCheckBox5bombaInf = new javax.swing.JCheckBox();
        jCheckBox6bombaNut = new javax.swing.JCheckBox();
        jCheckBox7aspirador = new javax.swing.JCheckBox();
        jCheckBox8intubacion = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        equiposAdicionar = new javax.swing.JPanel();
        ventiladorJCB = new javax.swing.JCheckBox();
        saturometroJCB = new javax.swing.JCheckBox();
        balaJCB = new javax.swing.JCheckBox();
        monitorJCB = new javax.swing.JCheckBox();
        bombaJCB = new javax.swing.JCheckBox();
        bombaNutJCB = new javax.swing.JCheckBox();
        aspiradorJCB = new javax.swing.JCheckBox();
        intubacionJCB = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        equiposT = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        buscarB = new javax.swing.JButton();
        observacionTF = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setMinimumSize(new java.awt.Dimension(755, 585));
        setPreferredSize(new java.awt.Dimension(755, 585));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        identificacionTF.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        identificacionTF.setForeground(new java.awt.Color(16, 65, 56));
        identificacionTF.setBorder(null);
        add(identificacionTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 43, 140, 30));

        nombre1L.setBackground(new java.awt.Color(0, 0, 0));
        nombre1L.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        nombre1L.setForeground(new java.awt.Color(255, 255, 255));
        nombre1L.setText("Nombre 1");
        add(nombre1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel7.setText("Observaciones");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 390, -1, -1));

        aceptarB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Aceptar.png"))); // NOI18N
        aceptarB.setToolTipText("");
        aceptarB.setBorder(null);
        aceptarB.setContentAreaFilled(false);
        aceptarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarBActionPerformed(evt);
            }
        });
        add(aceptarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 380, 83, -1));

        cancelarB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Cancelar.png"))); // NOI18N
        cancelarB.setBorder(null);
        cancelarB.setBorderPainted(false);
        cancelarB.setContentAreaFilled(false);
        cancelarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBActionPerformed(evt);
            }
        });
        add(cancelarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 440, -1, -1));

        nombre2L.setBackground(new java.awt.Color(0, 0, 0));
        nombre2L.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        nombre2L.setForeground(new java.awt.Color(255, 255, 255));
        nombre2L.setText("Nombre 2");
        add(nombre2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        apellido1L.setBackground(new java.awt.Color(0, 0, 0));
        apellido1L.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        apellido1L.setForeground(new java.awt.Color(255, 255, 255));
        apellido1L.setText("Apellido 1");
        add(apellido1L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        apellido2L.setBackground(new java.awt.Color(0, 0, 0));
        apellido2L.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        apellido2L.setForeground(new java.awt.Color(255, 255, 255));
        apellido2L.setText("Apellido 2");
        add(apellido2L, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        tipoAtencionCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        tipoAtencionCB.setForeground(new java.awt.Color(16, 65, 56));
        tipoAtencionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "UCIM", "UCI" }));
        tipoAtencionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoAtencionCBActionPerformed(evt);
            }
        });
        add(tipoAtencionCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, -1, -1));

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Tipo de atenci√≥n");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, -1, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("No. de cama");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, -1, -1));

        noCamaCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        noCamaCB.setForeground(new java.awt.Color(16, 65, 56));
        noCamaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCamaCBActionPerformed(evt);
            }
        });
        add(noCamaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 89, -1));

        fechaL.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        fechaL.setForeground(new java.awt.Color(255, 255, 255));
        fechaL.setText("Fecha");
        add(fechaL, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, -1, -1));

        rethusL.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        rethusL.setForeground(new java.awt.Color(255, 255, 255));
        rethusL.setText("ReTHUS");
        add(rethusL, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, -1, -1));

        equiposUsados.setBackground(new java.awt.Color(63, 191, 168));

        jCheckBox1ventilador.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox1ventilador.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox1ventilador.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox1ventilador.setText("Ventiladores");
        jCheckBox1ventilador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ventiladorActionPerformed(evt);
            }
        });

        jCheckBox2saturometro.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox2saturometro.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox2saturometro.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox2saturometro.setText("Saturometros");

        jCheckBox3balas.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox3balas.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox3balas.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox3balas.setText("Balas de oxigeno");

        jCheckBox4monitor.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox4monitor.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox4monitor.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox4monitor.setText("monitor card√≠aco");

        jCheckBox5bombaInf.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox5bombaInf.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox5bombaInf.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox5bombaInf.setText("Bomba de infusi√≥n continua");

        jCheckBox6bombaNut.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox6bombaNut.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox6bombaNut.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox6bombaNut.setText("Bomba de nutrici√≥n");

        jCheckBox7aspirador.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox7aspirador.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox7aspirador.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox7aspirador.setText("aspirador de secreciones");
        jCheckBox7aspirador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7aspiradorActionPerformed(evt);
            }
        });

        jCheckBox8intubacion.setBackground(new java.awt.Color(63, 191, 168));
        jCheckBox8intubacion.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jCheckBox8intubacion.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox8intubacion.setText("equipo de intubac√≥n");
        jCheckBox8intubacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8intubacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout equiposUsadosLayout = new javax.swing.GroupLayout(equiposUsados);
        equiposUsados.setLayout(equiposUsadosLayout);
        equiposUsadosLayout.setHorizontalGroup(
            equiposUsadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equiposUsadosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(equiposUsadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox8intubacion)
                    .addComponent(jCheckBox1ventilador)
                    .addComponent(jCheckBox2saturometro)
                    .addComponent(jCheckBox3balas)
                    .addComponent(jCheckBox4monitor)
                    .addComponent(jCheckBox5bombaInf)
                    .addComponent(jCheckBox6bombaNut)
                    .addComponent(jCheckBox7aspirador))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        equiposUsadosLayout.setVerticalGroup(
            equiposUsadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equiposUsadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1ventilador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2saturometro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3balas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4monitor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5bombaInf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6bombaNut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7aspirador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8intubacion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(equiposUsados, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 23)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Equipos usados");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 23)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Equipos disponibles");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, -1, -1));

        equiposAdicionar.setBackground(new java.awt.Color(255, 255, 255));

        ventiladorJCB.setBackground(new java.awt.Color(255, 255, 255));
        ventiladorJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        ventiladorJCB.setForeground(new java.awt.Color(16, 65, 56));
        ventiladorJCB.setText("Ventiladores");
        ventiladorJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ventiladorJCBActionPerformed(evt);
            }
        });

        saturometroJCB.setBackground(new java.awt.Color(255, 255, 255));
        saturometroJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        saturometroJCB.setForeground(new java.awt.Color(16, 65, 56));
        saturometroJCB.setText("Saturometros");
        saturometroJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturometroJCBActionPerformed(evt);
            }
        });

        balaJCB.setBackground(new java.awt.Color(255, 255, 255));
        balaJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        balaJCB.setForeground(new java.awt.Color(16, 65, 56));
        balaJCB.setText("Balas de oxigeno");
        balaJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balaJCBActionPerformed(evt);
            }
        });

        monitorJCB.setBackground(new java.awt.Color(255, 255, 255));
        monitorJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        monitorJCB.setForeground(new java.awt.Color(16, 65, 56));
        monitorJCB.setText("monitor card√≠aco");
        monitorJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorJCBActionPerformed(evt);
            }
        });

        bombaJCB.setBackground(new java.awt.Color(255, 255, 255));
        bombaJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        bombaJCB.setForeground(new java.awt.Color(16, 65, 56));
        bombaJCB.setText("Bomba de infusi√≥n continua");
        bombaJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bombaJCBActionPerformed(evt);
            }
        });

        bombaNutJCB.setBackground(new java.awt.Color(255, 255, 255));
        bombaNutJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        bombaNutJCB.setForeground(new java.awt.Color(16, 65, 56));
        bombaNutJCB.setText("Bomba de nutrici√≥n");
        bombaNutJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bombaNutJCBActionPerformed(evt);
            }
        });

        aspiradorJCB.setBackground(new java.awt.Color(255, 255, 255));
        aspiradorJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        aspiradorJCB.setForeground(new java.awt.Color(16, 65, 56));
        aspiradorJCB.setText("aspirador de secreciones");
        aspiradorJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aspiradorJCBActionPerformed(evt);
            }
        });

        intubacionJCB.setBackground(new java.awt.Color(255, 255, 255));
        intubacionJCB.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        intubacionJCB.setForeground(new java.awt.Color(16, 65, 56));
        intubacionJCB.setText("equipo de intubac√≥n");
        intubacionJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intubacionJCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout equiposAdicionarLayout = new javax.swing.GroupLayout(equiposAdicionar);
        equiposAdicionar.setLayout(equiposAdicionarLayout);
        equiposAdicionarLayout.setHorizontalGroup(
            equiposAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equiposAdicionarLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(equiposAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(intubacionJCB)
                    .addComponent(ventiladorJCB)
                    .addComponent(saturometroJCB)
                    .addComponent(balaJCB)
                    .addComponent(monitorJCB)
                    .addComponent(bombaJCB)
                    .addComponent(bombaNutJCB)
                    .addComponent(aspiradorJCB))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        equiposAdicionarLayout.setVerticalGroup(
            equiposAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equiposAdicionarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ventiladorJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saturometroJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balaJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monitorJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bombaJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bombaNutJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aspiradorJCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(intubacionJCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(equiposAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 240, -1));

        equiposT.setBackground(new java.awt.Color(236, 236, 236));
        equiposT.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        equiposT.setForeground(new java.awt.Color(16, 65, 56));
        equiposT.setModel(new javax.swing.table.DefaultTableModel(
            mostrar(),
            new String [] {
                "ID", "EQUIPO", "CANTIDAD"
            }
        ));
        equiposT.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(equiposT);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 230, 210, 190));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 23)); // NOI18N
        jLabel6.setText("Equipos adicionar");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, -1, -1));

        buscarB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Buscar.png"))); // NOI18N
        buscarB.setBorder(null);
        buscarB.setBorderPainted(false);
        buscarB.setContentAreaFilled(false);
        buscarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBActionPerformed(evt);
            }
        });
        add(buscarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 100, -1, -1));

        observacionTF.setBackground(new java.awt.Color(231, 231, 231));
        observacionTF.setColumns(20);
        observacionTF.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        observacionTF.setForeground(new java.awt.Color(16, 65, 56));
        observacionTF.setRows(5);
        observacionTF.setBorder(null);
        add(observacionTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 410, 220, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Actualizacion_Paciente.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarBActionPerformed

        if(ingp.getIdIngreso() != 0){
            //Actualiza los equipos a estado=false 
            this.jCheckBox1ventilador.setSelected(false);
            this.jCheckBox2saturometro.setSelected(false);
            this.jCheckBox3balas.setSelected(false);
            this.jCheckBox4monitor.setSelected(false);
            this.jCheckBox5bombaInf.setSelected(false);
            this.jCheckBox6bombaNut.setSelected(false);
            this.jCheckBox7aspirador.setSelected(false);
            this.jCheckBox8intubacion.setSelected(false);
            this.ventiladorJCB.setSelected(false);
            this.saturometroJCB.setSelected(false);
            this.balaJCB.setSelected(false);
            this.monitorJCB.setSelected(false);
            this.bombaJCB.setSelected(false);
            this.bombaNutJCB.setSelected(false);
            this.aspiradorJCB.setSelected(false);
            this.intubacionJCB.setSelected(false);
            
            IngresoPacienteDAO ingpdao = new IngresoPacienteDAO();
            IngresoPaciente ingpaux = new IngresoPaciente();
            
            Equipo eqaux = new Equipo();
            EquipoDAO eqdao = new EquipoDAO();
            EquiposUsados equs = new EquiposUsados();
            EquiposUsadosDAO equsdao = new EquiposUsadosDAO();
            equsdao.actualizarEquipos(Long.toString(this.ingp.getIdIngreso()));
            
            //Borra registro en 'EquiposUsados' CODIFICAR****
            equsdao.borrarPorIngresoId(Long.toString(this.ingp.getIdIngreso()));
            
            //Registra nuevos equipos usados
            for(Equipo eq:equipos){
                    equs.setEquipo(eq);
                    equs.setIngresoP(this.ingp);
                    equsdao.crear(equs);
                    eqaux = eq;
                    eqaux.setEstadoEquipo(true);
                    eqdao.actualizar(eq, eqaux);
                }
            
            //Actualiza IngresoPaciente
            ingpaux = this.ingp;
            ingpaux.setObservacion(observacionTF.getText());
            ingpdao.actualizarL(ingp, ingpaux);
            
          //MENSAJE ACTIALIZACION EXITOSA
            JOptionPane.showMessageDialog(null, "Actualizaci√≥n de paceinte exitosa", "", JOptionPane.INFORMATION_MESSAGE);  
        }
        else {
            System.out.println("NO ES POSIBLE REALIZAR LA ACTUALIZACI√ìN: EL PACIENTE NO TIENE INGRESOS ACTIVOS");
        }
        
    }//GEN-LAST:event_aceptarBActionPerformed

    private void tipoAtencionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoAtencionCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoAtencionCBActionPerformed

    private void noCamaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noCamaCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noCamaCBActionPerformed

    private void jCheckBox1ventiladorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ventiladorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ventiladorActionPerformed

    private void jCheckBox7aspiradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7aspiradorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox7aspiradorActionPerformed

    private void jCheckBox8intubacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8intubacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox8intubacionActionPerformed

    private void ventiladorJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ventiladorJCBActionPerformed
        // TODO add your handling code here:
        Equipo ventilador = new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        ventilador = eqdao.leerEquiposDisp("VENTILADOR MECANICO");
        
        if (ventiladorJCB.isSelected()) {
        //    this.validarIngresoPaciente.setAspiradorSecreciones(true);
            
            if(ventilador.getNombreEquipo()!=null){
                equipos.add(ventilador);
            } else {
                System.out.println("VENTILADOR MECANICO NO DISPONIBLE");
            }
            
        } else {
        //    this.validarIngresoPaciente.setAspiradorSecreciones(false);
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("VENTILADOR MECANICO")){
                    equipos.remove(e);
                    break;
                }
            }
            System.out.println("VENTILADOR REMOVIDO");
        }
    }//GEN-LAST:event_ventiladorJCBActionPerformed

    private void aspiradorJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aspiradorJCBActionPerformed
        // TODO add your handling code here:
        Equipo aspiradorSec = new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        aspiradorSec = eqdao.leerEquiposDisp("ASPIRADOR DE SECRECIONES");
        
        if (aspiradorJCB.isSelected()) {
            if(aspiradorSec.getNombreEquipo()!=null){
                equipos.add(aspiradorSec);
            } else {
                System.out.println("ASPIRADOR DE SECRECIONES NO DISPONIBLE");
            }
        } else {
        //    this.validarIngresoPaciente.setBombaInfucionContinua(false);
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("ASPIRADOR DE SECRECIONES")){
                    equipos.remove(e);
                    break;
                }
            }
            System.out.println("ASPIRADOR REMOVIDO");
        }
    }//GEN-LAST:event_aspiradorJCBActionPerformed

    private void intubacionJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intubacionJCBActionPerformed
        // TODO add your handling code here:
        Equipo eqIntub= new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        eqIntub = eqdao.leerEquiposDisp("EQUIPO DE INTUBACION");
        if (intubacionJCB.isSelected()) {
            
            if(eqIntub.getNombreEquipo()!=null){
                equipos.add(eqIntub);
            } else {
                System.out.println("EQUIPO DE INTUBACION NO DISPONIBLE");
            }
        } else {
        //    this.validarIngresoPaciente.setEquipoIntubacion(false);
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("EQUIPO DE INTUBACION")){
                    equipos.remove(e);
                    break;
                }
            }
            System.out.println("EQUIPO DE INTUBACI√ìN REMOVIDO");
        }
    }//GEN-LAST:event_intubacionJCBActionPerformed

    private void buscarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBActionPerformed
        // TODO add your handling code here:
        //Busca paciente por id
        String idpaciente = identificacionTF.getText();
        IngresoPacienteDAO ingpdao = new IngresoPacienteDAO();
        this.ingp = ingpdao.leerPorPaciente(idpaciente);
        if(this.ingp.getIdIngreso() != 0){
            this.paciente = ingp.getPaciente();
            nombre1L.setText("Nombre 1: " + this.paciente.getNombrePaciente1());
            nombre2L.setText("Nombre 2: " + this.paciente.getNombrePaciente2());
            apellido1L.setText("Apellido 1: " + this.paciente.getApellidoPaciente1());
            apellido2L.setText("Apellido 2: " + this.paciente.getApellidoPaciente2());
            fechaL.setText("Fecha: " + this.ingp.getFecha());
            rethusL.setText("reTHUS: " + this.ingp.getPersonalm().getReTHUS());
            observacionTF.setText(this.ingp.getObservacion());
            
            EquiposUsadosDAO equsdao = new EquiposUsadosDAO();
            ArrayList<EquiposUsados> equsmostrar = new ArrayList();
            equsmostrar = equsdao.equiposUsadosPorIngreso(Long.toString(this.ingp.getIdIngreso()));
            equipos.removeAll(equipos);
            for(EquiposUsados equsa : equsmostrar){
                System.out.println("-->>EQUIPO SELECCIONADO<<--");
                System.out.println(equsa.getEquipo().getNombreEquipo());
                
                switch(equsa.getEquipo().getNombreEquipo()){
                    case "VENTILADOR MECANICO":
                        this.ventiladorJCB.setSelected(true);
                        this.jCheckBox1ventilador.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;
                    case "SATUROMETRO":
                        this.saturometroJCB.setSelected(true);
                        this.jCheckBox2saturometro.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;
                    case "BALA OXIGENO":
                        this.balaJCB.setSelected(true);
                        this.jCheckBox3balas.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;
                    case "MONITOR":
                       this.monitorJCB.setSelected(true);
                        this.jCheckBox4monitor.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;
                    case "BOMBA INFUSION CONTINUA":
                        this.bombaJCB.setSelected(true);
                        this.jCheckBox5bombaInf.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;    
                    case "BOMBA NUTRICION ENTERAL":
                        this.bombaNutJCB.setSelected(true);
                        this.jCheckBox6bombaNut.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;    
                    case "ASPIRADOR DE SECRECIONES":
                        this.aspiradorJCB.setSelected(true);
                        this.jCheckBox7aspirador.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break; 
                    case "EQUIPO DE INTUBACION":
                        this.intubacionJCB.setSelected(true);
                        this.jCheckBox8intubacion.setSelected(true);
                        equipos.add(equsa.getEquipo());
                        break;    
                    case "":
                        break;
                }
                
            }
                        

        }
        else {
            System.out.println("EL PACIENTE NO TIENE INGRESOS ACTIVOS...");
        }
    }//GEN-LAST:event_buscarBActionPerformed

    private void cancelarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_cancelarBActionPerformed

    private void bombaJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bombaJCBActionPerformed
        // TODO add your handling code here:
        Equipo bombaInfC = new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        bombaInfC = eqdao.leerEquiposDisp("BOMBA INFUSION CONTINUA");
        if (bombaJCB.isSelected()) {
            
            if(bombaInfC.getNombreEquipo()!=null){
                equipos.add(bombaInfC);
            } else {
                System.out.println("BOMBA INFUSION CONTINUA NO DISPONIBLE");
            }
        } else {
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("BOMBA INFUSION CONTINUA")){
                    equipos.remove(e);
                    break;
                }
            }
            System.out.println("BOMBA INFUSION CONTINUA REMOVIDA");
        }
    }//GEN-LAST:event_bombaJCBActionPerformed

    private void saturometroJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturometroJCBActionPerformed
        // TODO add your handling code here:
        Equipo saturometro = new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        saturometro = eqdao.leerEquiposDisp("SATUROMETRO");
        if (saturometroJCB.isSelected()) {
            
            if(saturometro.getNombreEquipo()!=null){
                equipos.add(saturometro);
            } else {
                System.out.println("SATUROMETRO NO DISPONIBLE");
            }            
        } else {
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("SATUROMETRO")){
                    equipos.remove(e);
                    break;
                }}
            System.out.println("SATUROMETRO REMOVIDO");
        }   
    }//GEN-LAST:event_saturometroJCBActionPerformed

    private void balaJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balaJCBActionPerformed
        // TODO add your handling code here:
        Equipo balaOxig = new Equipo();
        EquipoDAO eqdao = new EquipoDAO();
        balaOxig = eqdao.leerEquiposDisp("BALA OXIGENO");
        if (balaJCB.isSelected()) {
            
            if(balaOxig.getNombreEquipo()!=null){
                equipos.add(balaOxig);
            } else {
                System.out.println("BALA OXIGENO NO DISPONIBLE");
            }
        } else {
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("BALA OXIGENO")){
                    equipos.remove(e);
                    break;
                }}
            System.out.println("BALA OXIGENO REMOVIDA");
            //this.validarIngresoPaciente.setBalasOxigeno(false);
        }
    }//GEN-LAST:event_balaJCBActionPerformed

    private void monitorJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorJCBActionPerformed
        // TODO add your handling code here:
        Equipo monitor = new Equipo();
            EquipoDAO eqdao = new EquipoDAO();
            monitor = eqdao.leerEquiposDisp("MONITOR");
        if (monitorJCB.isSelected()) {
            
            if(monitor.getNombreEquipo()!=null){
                equipos.add(monitor);
            } else {
                System.out.println("MONITOR NO DISPONIBLE");
            }
        } else {
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("MONITOR")){
                    equipos.remove(e);
                    break;
                }}
            System.out.println("MONITOR REMOVIDO");
            //this.validarIngresoPaciente.setMonitor(false);
        }
    }//GEN-LAST:event_monitorJCBActionPerformed

    private void bombaNutJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bombaNutJCBActionPerformed
        // TODO add your handling code here:
        Equipo bombaNutricion = new Equipo();
            EquipoDAO eqdao = new EquipoDAO();
            bombaNutricion = eqdao.leerEquiposDisp("BOMBA NUTRICION ENTERAL");
        if (bombaNutJCB.isSelected()) {
            
            if(bombaNutricion.getNombreEquipo()!=null){
                equipos.add(bombaNutricion);
            } else {
                System.out.println("BOMBA NUTRICION ENTERAL NO DISPONIBLE");
            }
        } else {
            for(Equipo e:equipos){
                if(e.getNombreEquipo().equals("BOMBA NUTRICION ENTERAL")){
                    equipos.remove(e);
                    break;
                }}
            System.out.println("BOMBA NUTRICION ENTERAL REMOVIDA");
            //this.validarIngresoPaciente.setBombasNutricion(false);
        }
    }//GEN-LAST:event_bombaNutJCBActionPerformed
        
    public void limpiar(){
        nombre1L.setText("Nombre 1");
        nombre2L.setText("Nombre 2");
        apellido1L.setText("Apellido 1");
        apellido2L.setText("Apellido 2");
        fechaL.setText("Fecha");
        rethusL.setText("ReThus");
        this.ingp = null;
        this.paciente = null;
        this.equipos = null;
    }
    
    public String [][] mostrar(){
        EquipoDAO edao = new EquipoDAO();
        List<Equipo> eqs = new ArrayList();
        
        String[] nombres = new String[] {"EQUIPO DE INTUBACION", "SATUROMETRO", "BALA OXIGENO", "MONITOR", "BOMBA INFUSION CONTINUA", "BOMBA NUTRICION ENTERAL", "ASPIRADOR DE SECRECIONES","VENTILADOR MECANICO" };
        for(int i = 0; i < nombres.length; i++){
            Equipo e = new Equipo();
            e.setIdEquipo(i);
            e.setNombreEquipo(nombres[i]);
            eqs.add(e);
          
        }
        
        String[][] matriz=new String[eqs.size()][3];
        for(int i = 0; i<eqs.size(); i++){
            matriz[i][0] = Integer.toString(eqs.get(i).getIdEquipo());
            matriz[i][1] = eqs.get(i).getNombreEquipo();
            matriz[i][2] = Long.toString(edao.leerEq(eqs.get(i).getNombreEquipo()));//10 se debe reemplazar por la consulta SQL
        }
        
        return matriz;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarB;
    private javax.swing.JLabel apellido1L;
    private javax.swing.JLabel apellido2L;
    private javax.swing.JCheckBox aspiradorJCB;
    private javax.swing.JCheckBox balaJCB;
    private javax.swing.JCheckBox bombaJCB;
    private javax.swing.JCheckBox bombaNutJCB;
    private javax.swing.JButton buscarB;
    private javax.swing.JButton cancelarB;
    private javax.swing.JPanel equiposAdicionar;
    private javax.swing.JTable equiposT;
    private javax.swing.JPanel equiposUsados;
    private javax.swing.JLabel fechaL;
    private javax.swing.JTextField identificacionTF;
    private javax.swing.JCheckBox intubacionJCB;
    private javax.swing.JCheckBox jCheckBox1ventilador;
    private javax.swing.JCheckBox jCheckBox2saturometro;
    private javax.swing.JCheckBox jCheckBox3balas;
    private javax.swing.JCheckBox jCheckBox4monitor;
    private javax.swing.JCheckBox jCheckBox5bombaInf;
    private javax.swing.JCheckBox jCheckBox6bombaNut;
    private javax.swing.JCheckBox jCheckBox7aspirador;
    private javax.swing.JCheckBox jCheckBox8intubacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox monitorJCB;
    private javax.swing.JComboBox<String> noCamaCB;
    private javax.swing.JLabel nombre1L;
    private javax.swing.JLabel nombre2L;
    private javax.swing.JTextArea observacionTF;
    private javax.swing.JLabel rethusL;
    private javax.swing.JCheckBox saturometroJCB;
    private javax.swing.JComboBox<String> tipoAtencionCB;
    private javax.swing.JCheckBox ventiladorJCB;
    // End of variables declaration//GEN-END:variables
}
